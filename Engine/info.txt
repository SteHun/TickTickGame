Engine
| AssetManager: A glorified wrapper for content.Load methods. It has a static member that's used across the game. 
| ExtendedGame: The base game class where you can find the Update, Draw, etc. methods. TickTick.TickTick inherits from this. 
| GameObject: Seems be be the generic base class for a bunch of game objects. It contains a basic velocity system and can have a parent to base its position of. 
| GameObjectList: Seems to be a GameObject which contains other GameObjects as children. Inherits from GameObject. 
| GameState: An abstract class. It contains the root GameObjectList which contains all current GameObjects. The classes that inherit from this all call the methods when its state is active to affect all GameObjects connected to that state.
| GameStateManager: Contains a dictionary for several gamestates and a reference to the active one. Has the ability to add and switch game states. 
| IGameLoopObject: An interface with the blueprint for functions HandeInput, Update, Draw and Reset. However, it seems redundant as the interface is inherited but never used. 
| InputHelper: A simple input helper for mouse and keyboard. 
| SpriteGameObject: A game object with a sprite. It uses the SpriteSheet class
! NOTE: There seem to be two types of collision: with a bounding box and "pixel precise". The bounding box is stuck to the size of the sprite. No more no less. 
! The "pixel precise" collision checks if there are two non-transparent overlapping pixels which is inefficient and inflexible. We might want to change this. 
| SpriteSheet: This contains a sprite sheet texture and can draw the correct piece of the sprite sheet. It can also notify where there is transparency.  
| TextGameObject: A simple GameObject extension that draws text. 
| VisibilityTime: This entire class is never used lol
| UI folder: Contains a Button, Slider and Switch class, these all contain a handel input which can be referenced by classes to run code when it is detected.
| Levels -> LevelStatus: Holds an enum, state of level is Locked, Unlocked or Solved
| Levels -> LevelButton: Is a Button (from UI folder) holds a value for its index (what level it is), its status (levelStatus) and a label (which is a string that is printed if not null)
| Levels -> IPlayingState: Interface for LoadLevel and LevelCompleted used in ExtendedGameWithLevels
| Levels -> ExtendedGameWithLevels: An abstract class. Holds all the levels in a list with their statuses.
| CollisionDetection -> Circle: Holds a center and radius variable of a circle, used in CollisionDetection.cs
| CollisionDetection -> CollisionDetection: Holds a few static functions used to calculate if two circles or rectangles overlap.
| Animation -> Animation: Used to let an animation play a certain amount of frames in a certain amount of seconds. Has functionality for looping.
| Animation -> AnimatedGameObject: Class to represent multiple animated sprites. Holds animations in dictionary. Implements the methods of the animation class.